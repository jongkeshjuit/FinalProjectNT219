/root/quantum - secure - commerce / webapp / src / components / Hero.tsx

import { Link } from 'react-router-dom';

export default function Hero() {
    return (
        <div className="relative bg-gray-900 overflow-hidden">
            {/* Background Pattern */}
            <div className="absolute inset-0">
                <div className="absolute inset-0 bg-gradient-to-br from-blue-600/20 to-purple-600/20"></div>
                <div className="absolute inset-0" style={{
                    backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%234F46E5' fill-opacity='0.05'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
                }}></div>
            </div>

            <div className="relative container mx-auto px-4 py-24">
                <div className="text-center max-w-4xl mx-auto">
                    {/* Badge */}
                    <div className="inline-flex items-center gap-2 bg-blue-600/20 text-blue-400 px-4 py-2 rounded-full mb-6">
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                        </svg>
                        <span className="font-semibold">Quantum-Safe Security</span>
                    </div>

                    {/* Heading */}
                    <h1 className="text-5xl md:text-6xl font-bold text-white mb-6">
                        Shop with{' '}
                        <span className="bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                            Quantum Security
                        </span>
                    </h1>

                    <p className="text-xl text-gray-300 mb-8 max-w-2xl mx-auto">
                        Experience the future of e-commerce with post-quantum cryptography.
                        Every transaction is protected by CRYSTALS-Dilithium signatures and
                        Identity-Based Encryption.
                    </p>

                    {/* CTA Buttons */}
                    <div className="flex flex-col sm:flex-row gap-4 justify-center">
                        <Link
                            to="/register"
                            className="bg-gradient-to-r from-blue-600 to-blue-700 text-white px-8 py-4 rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all transform hover:scale-105"
                        >
                            Get Started
                        </Link>
                        <a
                            href="#features"
                            className="bg-gray-800 text-white px-8 py-4 rounded-lg font-semibold hover:bg-gray-700 transition-all"
                        >
                            Learn More
                        </a>
                    </div>

                    {/* Stats */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mt-16">
                        <div className="text-center">
                            <div className="text-4xl font-bold text-white mb-2">256-bit</div>
                            <p className="text-gray-400">Post-Quantum Security</p>
                        </div>
                        <div className="text-center">
                            <div className="text-4xl font-bold text-white mb-2">&lt; 1ms</div>
                            <p className="text-gray-400">Transaction Signing</p>
                        </div>
                        <div className="text-center">
                            <div className="text-4xl font-bold text-white mb-2">100%</div>
                            <p className="text-gray-400">End-to-End Encrypted</p>
                        </div>
                    </div>
                </div>
            </div>

            {/* Wave Shape */}
            <div className="absolute bottom-0 left-0 right-0">
                <svg className="w-full h-20 text-gray-800" preserveAspectRatio="none" viewBox="0 0 1440 74">
                    <path fill="currentColor" d="M0,32L48,37.3C96,43,192,53,288,58.7C384,64,480,64,576,56C672,48,768,32,864,26.7C960,21,1056,27,1152,32C1248,37,1344,43,1392,45.3L1440,48L1440,74L1392,74C1344,74,1248,74,1152,74C1056,74,960,74,864,74C768,74,672,74,576,74C480,74,384,74,288,74C192,74,96,74,48,74L0,74Z"></path>
                </svg>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / components / Layout.tsx

import { Link, Outlet, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { useCart } from '../contexts/CartContext';

export default function Layout() {
    const { user, logout } = useAuth();
    const { getCartItemsCount } = useCart();
    const navigate = useNavigate();

    const handleLogout = () => {
        logout();
        navigate('/');
    };

    return (
        <div className="min-h-screen bg-gray-900">
            {/* Navigation */}
            <nav className="bg-gray-800 border-b border-gray-700">
                <div className="container mx-auto px-4">
                    <div className="flex items-center justify-between h-16">
                        {/* Logo */}
                        <Link to="/" className="flex items-center gap-2">
                            <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                                <span className="text-white font-bold text-xl">Q</span>
                            </div>
                            <span className="text-white font-semibold text-lg">Quantum Commerce</span>
                        </Link>

                        {/* Nav Links */}
                        <div className="flex items-center gap-6">
                            <Link to="/" className="text-gray-300 hover:text-white transition-colors">
                                Products
                            </Link>

                            {user && (
                                <Link to="/orders" className="text-gray-300 hover:text-white transition-colors">
                                    My Orders
                                </Link>
                            )}

                            {(user?.user_type === 'admin' || user?.is_admin) && (
                                <Link to="/admin" className="text-gray-300 hover:text-white transition-colors">
                                    Admin
                                </Link>
                            )}

                            {/* Cart */}
                            <Link to="/cart" className="relative text-gray-300 hover:text-white transition-colors">
                                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                                </svg>
                                {getCartItemsCount() > 0 && (
                                    <span className="absolute -top-2 -right-2 bg-blue-600 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                                        {getCartItemsCount()}
                                    </span>
                                )}
                            </Link>

                            {/* User Menu */}
                            {user ? (
                                <div className="flex items-center gap-4">
                                    <span className="text-gray-400 text-sm">
                                        Hi, {user.name || user.username || user.email.split('@')[0]}
                                    </span>
                                    <button
                                        onClick={handleLogout}
                                        className="text-gray-300 hover:text-white transition-colors"
                                    >
                                        Logout
                                    </button>
                                </div>
                            ) : (
                                <div className="flex items-center gap-4">
                                    <Link
                                        to="/login"
                                        className="text-gray-300 hover:text-white transition-colors"
                                    >
                                        Login
                                    </Link>
                                    <Link
                                        to="/register"
                                        className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                                    >
                                        Sign Up
                                    </Link>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </nav>

            {/* Main Content */}
            <main>
                <Outlet />
            </main>

            {/* Footer */}
            <footer className="bg-gray-800 border-t border-gray-700 mt-16">
                <div className="container mx-auto px-4 py-8">
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
                        <div>
                            <h3 className="text-white font-semibold mb-4">About Quantum Commerce</h3>
                            <p className="text-gray-400 text-sm">
                                The world's first e-commerce platform secured with post-quantum cryptography.
                            </p>
                        </div>

                        <div>
                            <h3 className="text-white font-semibold mb-4">Security Features</h3>
                            <ul className="text-gray-400 text-sm space-y-2">
                                <li>• CRYSTALS-Dilithium Signatures</li>
                                <li>• Identity-Based Encryption</li>
                                <li>• Quantum-Safe Protocols</li>
                                <li>• End-to-End Encryption</li>
                            </ul>
                        </div>

                        <div>
                            <h3 className="text-white font-semibold mb-4">Quick Links</h3>
                            <ul className="text-gray-400 text-sm space-y-2">
                                <li><Link to="/" className="hover:text-white">Products</Link></li>
                                <li><Link to="/cart" className="hover:text-white">Cart</Link></li>
                                <li><Link to="/orders" className="hover:text-white">Orders</Link></li>
                                <li><a href="/api/docs" target="_blank" className="hover:text-white">API Docs</a></li>
                            </ul>
                        </div>

                        <div>
                            <h3 className="text-white font-semibold mb-4">Contact</h3>
                            <p className="text-gray-400 text-sm">
                                Email: support@quantumcommerce.com<br />
                                Phone: 1-800-QUANTUM<br />
                                Address: 123 Crypto St, Quantum City
                            </p>
                        </div>
                    </div>

                    <div className="border-t border-gray-700 mt-8 pt-8 text-center">
                        <p className="text-gray-400 text-sm">
                            © 2024 Quantum Commerce. Protected by post-quantum cryptography.
                        </p>
                    </div>
                </div>
            </footer>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / components / PrivateRoute.tsx

import { Navigate, Outlet, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

interface PrivateRouteProps {
    requiredRole?: string;
}

export default function PrivateRoute({ requiredRole }: PrivateRouteProps) {
    const { user, loading } = useAuth();
    const location = useLocation();

    if (loading) {
        // Loading spinner
        return (
            <div className="min-h-screen bg-gray-900 flex items-center justify-center">
                <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            </div>
        );
    }

    if (!user) {
        // Redirect to login with return URL
        return <Navigate to={`/login?redirect=${location.pathname}`} state={{ from: location }} replace />;
    }

    if (requiredRole && user.user_type !== requiredRole) {
        // User doesn't have required role
        return (
            <div className="min-h-screen bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <div className="text-6xl mb-4">🚫</div>
                    <h1 className="text-2xl font-bold text-white mb-2">Access Denied</h1>
                    <p className="text-gray-400">You don't have permission to access this page.</p>
                </div>
            </div>
        );
    }

    return <Outlet />;
}
/root/quantum - secure - commerce / webapp / src / components / ProductCard.tsx

import { Link } from 'react-router-dom';

interface Product {
    id: string;
    name: string;
    description: string;
    price: number;
    image: string;
    category: string;
    features?: string[];
}

interface ProductCardProps {
    product: Product;
    onAddToCart: () => void;
}

export default function ProductCard({ product, onAddToCart }: ProductCardProps) {
    return (
        <div className="bg-gray-800 rounded-lg overflow-hidden hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1">
            <Link to={`/product/${product.id}`}>
                <div className="aspect-w-16 aspect-h-9 overflow-hidden">
                    <img
                        src={product.image}
                        alt={product.name}
                        className="w-full h-48 object-cover hover:scale-105 transition-transform duration-300"
                    />
                </div>
            </Link>

            <div className="p-6">
                <div className="flex items-start justify-between mb-2">
                    <h3 className="text-xl font-semibold text-white">{product.name}</h3>
                    <span className="text-sm text-gray-400 bg-gray-700 px-2 py-1 rounded">
                        {product.category}
                    </span>
                </div>

                <p className="text-gray-400 text-sm mb-4">{product.description}</p>

                {product.features && (
                    <div className="mb-4">
                        <div className="flex flex-wrap gap-2">
                            {product.features.slice(0, 2).map((feature, index) => (
                                <span
                                    key={index}
                                    className="text-xs bg-blue-600/20 text-blue-400 px-2 py-1 rounded"
                                >
                                    {feature}
                                </span>
                            ))}
                        </div>
                    </div>
                )}

                <div className="flex items-center justify-between">
                    <span className="text-2xl font-bold text-white">${product.price}</span>

                    <div className="flex gap-2">
                        <Link
                            to={`/product/${product.id}`}
                            className="px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-600 transition-colors"
                        >
                            Details
                        </Link>
                        <button
                            onClick={onAddToCart}
                            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
                        >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            Add to Cart
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / config / security.ts
// webapp/src/config/security.ts
/**
 * Frontend security configuration
 */

// Extend ImportMeta interface for Vite env variables
/// <reference types="vite/client" />
interface ImportMetaEnv {
    readonly VITE_API_URL?: string;
    // add other env variables here as needed
}

interface ImportMeta {
    readonly env: ImportMetaEnv;
}

export const SecurityConfig = {
    // API endpoints
    API_URL: import.meta.env.VITE_API_URL || 'http://localhost:8000',

    // Token management
    TOKEN_KEY: 'quantum_commerce_token',
    USER_KEY: 'quantum_commerce_user',

    // Security headers
    getAuthHeaders: () => {
        const token = localStorage.getItem(SecurityConfig.TOKEN_KEY);
        return token ? { Authorization: `Bearer ${token}` } : {};
    },

    // XSS protection
    sanitizeInput: (input: string): string => {
        return input
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#x27;')
            .replace(/\//g, '&#x2F;');
    },

    // CSRF token
    getCSRFToken: (): string => {
        return document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
    }
};
/root/quantum - secure - commerce / webapp / src / contexts / AuthContext.tsx
// webapp/src/contexts/AuthContext.tsx - FIXED VERSION
import React, { createContext, useContext, useState, useEffect } from 'react';
import api from '../services/api';
import { SecurityConfig } from '../config/security';

interface User {
    id: string;
    email: string;
    name: string;
    username: string;
    user_type: string;
    is_admin?: boolean;
}

interface AuthContextType {
    user: User | null;
    token: string | null;
    login: (email: string, password: string) => Promise<void>;
    register: (email: string, name: string, password: string) => Promise<void>;
    logout: () => void;
    loading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function useAuth() {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth must be used within AuthProvider');
    }
    return context;
}

export function AuthProvider({ children }: { children: React.ReactNode }) {
    const [user, setUser] = useState<User | null>(null);
    const [token, setToken] = useState<string | null>(localStorage.getItem(SecurityConfig.TOKEN_KEY));
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        if (token) {
            api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
            const savedUser = localStorage.getItem(SecurityConfig.USER_KEY);
            if (savedUser) {
                try {
                    setUser(JSON.parse(savedUser));
                } catch (error) {
                    console.error('Error parsing saved user:', error);
                    localStorage.removeItem(SecurityConfig.USER_KEY);
                    localStorage.removeItem(SecurityConfig.TOKEN_KEY);
                    setToken(null);
                }
            }
        }
        setLoading(false);
    }, [token]);

    const login = async (email: string, password: string) => {
        try {
            const response = await api.post('/api/auth/login', {
                email,
                password
            });

            console.log('Login response:', response.data); // Debug log

            // Handle different response structures from backend
            const userData: User = {
                id: response.data.user?.id || response.data.user_id || response.data.id,
                email: response.data.user?.email || response.data.email || email,
                name: response.data.user?.full_name || response.data.user?.username || response.data.username || response.data.name || email.split('@')[0],
                username: response.data.user?.username || response.data.username || email.split('@')[0],
                user_type: (response.data.user?.is_admin || response.data.is_admin) ? 'admin' : 'customer',
                is_admin: response.data.user?.is_admin || response.data.is_admin || false
            };

            const accessToken = response.data.access_token;

            if (!accessToken) {
                throw new Error('No access token received');
            }

            localStorage.setItem(SecurityConfig.TOKEN_KEY, accessToken);
            localStorage.setItem(SecurityConfig.USER_KEY, JSON.stringify(userData));

            setToken(accessToken);
            setUser(userData);

            api.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;
            
            console.log('Login successful:', userData); // Debug log
        } catch (error: any) {
            console.error('Login error:', error.response?.data || error.message);
            throw error;
        }
    };

    const register = async (email: string, name: string, password: string) => {
        try {
            const response = await api.post('/api/auth/register', {
                email,
                username: name,
                password,
                full_name: name
            });

            console.log('Register response:', response.data); // Debug log

            // Handle registration response
            const userData: User = {
                id: response.data.user?.id || response.data.user_id || response.data.id,
                email: response.data.user?.email || response.data.email || email,
                name: response.data.user?.full_name || response.data.user?.username || response.data.username || name,
                username: response.data.user?.username || response.data.username || name,
                user_type: (response.data.user?.is_admin || response.data.is_admin) ? 'admin' : 'customer',
                is_admin: response.data.user?.is_admin || response.data.is_admin || false
            };

            const accessToken = response.data.access_token;

            if (!accessToken) {
                throw new Error('No access token received');
            }

            localStorage.setItem(SecurityConfig.TOKEN_KEY, accessToken);
            localStorage.setItem(SecurityConfig.USER_KEY, JSON.stringify(userData));

            setToken(accessToken);
            setUser(userData);

            api.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;
            
            console.log('Registration successful:', userData); // Debug log
        } catch (error: any) {
            console.error('Registration error:', error.response?.data || error.message);
            throw error;
        }
    };

    const logout = () => {
        localStorage.removeItem(SecurityConfig.TOKEN_KEY);
        localStorage.removeItem(SecurityConfig.USER_KEY);
        delete api.defaults.headers.common['Authorization'];
        setToken(null);
        setUser(null);
        console.log('Logout successful'); // Debug log
    };

    return (
        <AuthContext.Provider value={{ user, token, login, register, logout, loading }}>
            {children}
        </AuthContext.Provider>
    );
}
/root/quantum - secure - commerce / webapp / src / pages / AdminDashboard.tsx
import { useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from '../contexts/AuthContext'

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

interface Transaction {
    transaction_id: string;
    amount: number;
    currency: string;
    status: string;
    timestamp: string;
    customer_id: string;
}

interface Stats {
    total_transactions: number;
    total_revenue: number;
    active_users: number;
    success_rate: number;
}

export default function AdminDashboard() {
    const { token } = useAuth(); // Lấy token từ context thay vì props
    const [transactions, setTransactions] = useState < Transaction[] > ([]);
    const [stats, setStats] = useState < Stats | null > (null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        fetchDashboardData();
    }, []);

    const fetchDashboardData = async () => {
        try {
            // Fetch transactions
            const txResponse = await axios.get(`${API_URL}/api/admin/transactions`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setTransactions(txResponse.data.transactions);

            // Fetch stats
            const statsResponse = await axios.get(`${API_URL}/api/admin/stats`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setStats(statsResponse.data);
        } catch (error) {
            console.error('Failed to fetch dashboard data:', error);
        } finally {
            setLoading(false);
        }
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center h-64">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Stats Grid */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-white/10">
                    <h3 className="text-sm font-medium text-gray-400">Total Transactions</h3>
                    <p className="text-3xl font-bold text-primary mt-2">
                        {stats?.total_transactions || 0}
                    </p>
                </div>
                <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-white/10">
                    <h3 className="text-sm font-medium text-gray-400">Total Revenue</h3>
                    <p className="text-3xl font-bold text-green-400 mt-2">
                        ${stats?.total_revenue?.toFixed(2) || '0.00'}
                    </p>
                </div>
                <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-white/10">
                    <h3 className="text-sm font-medium text-gray-400">Active Users</h3>
                    <p className="text-3xl font-bold text-blue-400 mt-2">
                        {stats?.active_users || 0}
                    </p>
                </div>
                <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-white/10">
                    <h3 className="text-sm font-medium text-gray-400">Success Rate</h3>
                    <p className="text-3xl font-bold text-yellow-400 mt-2">
                        {stats?.success_rate?.toFixed(1) || '0'}%
                    </p>
                </div>
            </div>

            {/* Recent Transactions */}
            <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-white/10">
                <h2 className="text-xl font-bold mb-4">Recent Transactions</h2>
                <div className="overflow-x-auto">
                    <table className="w-full">
                        <thead>
                            <tr className="border-b border-white/10">
                                <th className="text-left py-3 px-4">Transaction ID</th>
                                <th className="text-left py-3 px-4">Amount</th>
                                <th className="text-left py-3 px-4">Status</th>
                                <th className="text-left py-3 px-4">Time</th>
                            </tr>
                        </thead>
                        <tbody>
                            {transactions.map((tx) => (
                                <tr key={tx.transaction_id} className="border-b border-white/5">
                                    <td className="py-3 px-4 font-mono text-sm">
                                        {tx.transaction_id.substring(0, 8)}...
                                    </td>
                                    <td className="py-3 px-4">
                                        ${tx.amount} {tx.currency}
                                    </td>
                                    <td className="py-3 px-4">
                                        <span className={`px-2 py-1 rounded text-xs ${tx.status === 'completed'
                                            ? 'bg-green-500/20 text-green-400'
                                            : 'bg-red-500/20 text-red-400'
                                            }`}>
                                            {tx.status}
                                        </span>
                                    </td>
                                    <td className="py-3 px-4 text-sm text-gray-400">
                                        {new Date(tx.timestamp).toLocaleString()}
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>

            {/* Crypto Keys Status */}
            <div className="bg-white/5 backdrop-blur-lg rounded-xl p-6 border border-white/10">
                <h2 className="text-xl font-bold mb-4">Cryptographic Systems Status</h2>
                <div className="space-y-3">
                    <div className="flex justify-between items-center">
                        <span>IBE System</span>
                        <span className="text-green-400">✓ Active</span>
                    </div>
                    <div className="flex justify-between items-center">
                        <span>Dilithium Signatures</span>
                        <span className="text-green-400">✓ Active</span>
                    </div>
                    <div className="flex justify-between items-center">
                        <span>Key Rotation</span>
                        <span className="text-yellow-400">Next: 30 days</span>
                    </div>
                </div>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / pages / CartPage.tsx

import { Link, useNavigate } from 'react-router-dom';
import { useCart } from '../contexts/CartContext';
import { useAuth } from '../contexts/AuthContext';

export default function CartPage() {
    const { cart, removeFromCart, updateQuantity, getCartTotal } = useCart();
    const { user } = useAuth();
    const navigate = useNavigate();

    const handleCheckout = () => {
        if (!user) {
            // Redirect to login with return URL
            navigate('/login?redirect=/checkout');
        } else {
            navigate('/checkout');
        }
    };

    if (cart.length === 0) {
        return (
            <div className="min-h-screen bg-gray-900 py-12">
                <div className="container mx-auto px-4">
                    <div className="max-w-2xl mx-auto text-center">
                        <svg className="w-24 h-24 text-gray-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                        </svg>
                        <h2 className="text-2xl font-bold text-white mb-4">Your Cart is Empty</h2>
                        <p className="text-gray-400 mb-8">
                            Looks like you haven't added any quantum-secure products yet!
                        </p>
                        <Link
                            to="/"
                            className="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
                        >
                            Continue Shopping
                        </Link>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-900 py-12">
            <div className="container mx-auto px-4">
                <h1 className="text-3xl font-bold text-white mb-8">Shopping Cart</h1>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    {/* Cart Items */}
                    <div className="lg:col-span-2">
                        <div className="bg-gray-800 rounded-lg p-6">
                            {cart.map((item) => (
                                <div key={item.id} className="flex items-center gap-4 py-4 border-b border-gray-700 last:border-0">
                                    <img
                                        src={item.image}
                                        alt={item.name}
                                        className="w-24 h-24 object-cover rounded-lg"
                                    />

                                    <div className="flex-1">
                                        <h3 className="text-white font-semibold">{item.name}</h3>
                                        <p className="text-gray-400 text-sm">{item.description}</p>

                                        <div className="flex items-center gap-4 mt-2">
                                            <div className="flex items-center gap-2">
                                                <button
                                                    onClick={() => updateQuantity(item.id, Math.max(1, item.quantity - 1))}
                                                    className="w-8 h-8 bg-gray-700 text-white rounded flex items-center justify-center hover:bg-gray-600"
                                                >
                                                    -
                                                </button>
                                                <span className="text-white w-8 text-center">{item.quantity}</span>
                                                <button
                                                    onClick={() => updateQuantity(item.id, item.quantity + 1)}
                                                    className="w-8 h-8 bg-gray-700 text-white rounded flex items-center justify-center hover:bg-gray-600"
                                                >
                                                    +
                                                </button>
                                            </div>

                                            <button
                                                onClick={() => removeFromCart(item.id)}
                                                className="text-red-400 hover:text-red-300 text-sm"
                                            >
                                                Remove
                                            </button>
                                        </div>
                                    </div>

                                    <div className="text-right">
                                        <p className="text-white font-semibold">
                                            ${(item.price * item.quantity).toFixed(2)}
                                        </p>
                                        <p className="text-gray-400 text-sm">
                                            ${item.price.toFixed(2)} each
                                        </p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Order Summary */}
                    <div className="lg:col-span-1">
                        <div className="bg-gray-800 rounded-lg p-6 sticky top-4">
                            <h2 className="text-xl font-semibold text-white mb-4">Order Summary</h2>

                            <div className="space-y-2 mb-4">
                                <div className="flex justify-between text-gray-400">
                                    <span>Subtotal</span>
                                    <span>${getCartTotal().toFixed(2)}</span>
                                </div>
                                <div className="flex justify-between text-gray-400">
                                    <span>Quantum Security Fee</span>
                                    <span className="text-green-400">FREE</span>
                                </div>
                                <div className="flex justify-between text-gray-400">
                                    <span>Estimated Tax</span>
                                    <span>${(getCartTotal() * 0.08).toFixed(2)}</span>
                                </div>
                            </div>

                            <div className="border-t border-gray-700 pt-4 mb-6">
                                <div className="flex justify-between text-white font-semibold text-lg">
                                    <span>Total</span>
                                    <span>${(getCartTotal() * 1.08).toFixed(2)}</span>
                                </div>
                            </div>

                            <button
                                onClick={handleCheckout}
                                className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all"
                            >
                                {user ? 'Proceed to Checkout' : 'Login to Checkout'}
                            </button>

                            <div className="mt-4 p-4 bg-gray-700/50 rounded-lg">
                                <div className="flex items-center gap-2 text-green-400 mb-2">
                                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                    </svg>
                                    <span className="font-semibold">Quantum-Safe Checkout</span>
                                </div>
                                <p className="text-gray-400 text-sm">
                                    Your payment will be encrypted with post-quantum cryptography
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / pages / CheckoutPage.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../contexts/CartContext';
import { useAuth } from '../contexts/AuthContext';
import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

export default function CheckoutPage() {
    const navigate = useNavigate();
    const { cart, getCartTotal, clearCart } = useCart();
    const { token } = useAuth();
    const [loading, setLoading] = useState(false);
    const [paymentStatus, setPaymentStatus] = useState < any > (null);

    const [formData, setFormData] = useState({
        cardNumber: '',
        expMonth: '',
        expYear: '',
        cvv: '',
        billingName: '',
        billingAddress: '',
        billingCity: '',
        billingState: '',
        billingZip: ''
    });

    const formatCardNumber = (value: string) => {
        const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
        const matches = v.match(/\d{4,16}/g);
        const match = (matches && matches[0]) || '';
        const parts = [];

        for (let i = 0, len = match.length; i < len; i += 4) {
            parts.push(match.substring(i, i + 4));
        }

        return parts.length ? parts.join(' ') : value;
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setLoading(true);
        setPaymentStatus(null);

        try {
            const response = await axios.post(
                `${API_URL}/api/payments/process`,
                {
                    amount: getCartTotal() * 1.08,
                    currency: 'USD',
                    payment_method: 'credit_card',
                    payment_data: {
                        card_number: formData.cardNumber.replace(/\s/g, ''),
                        exp_month: formData.expMonth,
                        exp_year: formData.expYear,
                        cvv: formData.cvv,
                        // Đưa billing vào payment_data:
                        billing_name: formData.billingName,
                        billing_address: formData.billingAddress,
                        billing_city: formData.billingCity,
                        billing_state: formData.billingState,
                        billing_zip: formData.billingZip
                    },
                    items: cart.map(item => ({
                        name: item.name,
                        price: item.price,
                        quantity: item.quantity
                    }))
                },
                {
                    headers: { Authorization: `Bearer ${token}` }
                }
            );

            if (response.data.status === 'completed') {
                setPaymentStatus({
                    success: true,
                    ...response.data
                });

                // Clear cart and redirect after 3 seconds
                clearCart();
                // setTimeout(() => {
                //     navigate(`/order-success/${response.data.transaction_id}`);
                // }, 3000);
                navigate(`/order-success/${response.data.transaction_id}`);
            }
        } catch (error: any) {
            setPaymentStatus({
                success: false,
                message: error.response?.data?.detail || 'Payment failed'
            });
        } finally {
            setLoading(false);
        }
    };

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;

        if (name === 'cardNumber') {
            setFormData({ ...formData, [name]: formatCardNumber(value) });
        } else {
            setFormData({ ...formData, [name]: value });
        }
    };

    return (
        <div className="min-h-screen bg-gray-900 py-12">
            <div className="container mx-auto px-4">
                <h1 className="text-3xl font-bold text-white mb-8">Secure Checkout</h1>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    {/* Payment Form */}
                    <div>
                        <div className="bg-gray-800 rounded-lg p-6">
                            <h2 className="text-xl font-semibold text-white mb-6">Payment Information</h2>

                            {/* Security Badge */}
                            <div className="bg-green-900/20 border border-green-500/30 rounded-lg p-4 mb-6">
                                <div className="flex items-center gap-3">
                                    <svg className="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                    </svg>
                                    <div>
                                        <p className="text-green-400 font-semibold">Quantum-Safe Transaction</p>
                                        <p className="text-green-300 text-sm">
                                            Protected by CRYSTALS-Dilithium digital signatures
                                        </p>
                                    </div>
                                </div>
                            </div>

                            <form onSubmit={handleSubmit} className="space-y-4">
                                {/* Card Number */}
                                <div>
                                    <label className="block text-sm font-medium text-gray-300 mb-2">
                                        Card Number
                                    </label>
                                    <input
                                        type="text"
                                        name="cardNumber"
                                        value={formData.cardNumber}
                                        onChange={handleInputChange}
                                        placeholder="1234 5678 9012 3456"
                                        maxLength={19}
                                        required
                                        className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                    />
                                </div>

                                {/* Expiry and CVV */}
                                <div className="grid grid-cols-3 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-300 mb-2">
                                            Month
                                        </label>
                                        <input
                                            type="text"
                                            name="expMonth"
                                            value={formData.expMonth}
                                            onChange={handleInputChange}
                                            placeholder="MM"
                                            maxLength={2}
                                            required
                                            className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-300 mb-2">
                                            Year
                                        </label>
                                        <input
                                            type="text"
                                            name="expYear"
                                            value={formData.expYear}
                                            onChange={handleInputChange}
                                            placeholder="YYYY"
                                            maxLength={4}
                                            required
                                            className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-300 mb-2">
                                            CVV
                                        </label>
                                        <input
                                            type="text"
                                            name="cvv"
                                            value={formData.cvv}
                                            onChange={handleInputChange}
                                            placeholder="123"
                                            maxLength={3}
                                            required
                                            className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                        />
                                    </div>
                                </div>

                                {/* Billing Info */}
                                <div>
                                    <label className="block text-sm font-medium text-gray-300 mb-2">
                                        Name on Card
                                    </label>
                                    <input
                                        type="text"
                                        name="billingName"
                                        value={formData.billingName}
                                        onChange={handleInputChange}
                                        required
                                        className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-300 mb-2">
                                        Billing Address
                                    </label>
                                    <input
                                        type="text"
                                        name="billingAddress"
                                        value={formData.billingAddress}
                                        onChange={handleInputChange}
                                        required
                                        className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                    />
                                </div>

                                <div className="grid grid-cols-3 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-300 mb-2">
                                            City
                                        </label>
                                        <input
                                            type="text"
                                            name="billingCity"
                                            value={formData.billingCity}
                                            onChange={handleInputChange}
                                            required
                                            className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-300 mb-2">
                                            State
                                        </label>
                                        <input
                                            type="text"
                                            name="billingState"
                                            value={formData.billingState}
                                            onChange={handleInputChange}
                                            maxLength={2}
                                            required
                                            className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                        />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-300 mb-2">
                                            ZIP
                                        </label>
                                        <input
                                            type="text"
                                            name="billingZip"
                                            value={formData.billingZip}
                                            onChange={handleInputChange}
                                            maxLength={5}
                                            required
                                            className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                        />
                                    </div>
                                </div>

                                <button
                                    type="submit"
                                    disabled={loading}
                                    className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-4 rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all disabled:opacity-60"
                                >
                                    {loading ? 'Processing...' : `Pay $${(getCartTotal() * 1.08).toFixed(2)}`}
                                </button>
                            </form>

                            {/* Payment Status */}
                            {paymentStatus && (
                                <div className={`mt-6 p-4 rounded-lg ${paymentStatus.success
                                    ? 'bg-green-900/20 border border-green-500/30'
                                    : 'bg-red-900/20 border border-red-500/30'
                                    }`}>
                                    {paymentStatus.success ? (
                                        <div>
                                            <p className="text-green-400 font-semibold mb-2">
                                                ✅ Payment Successful!
                                            </p>
                                            <p className="text-gray-300 text-sm">
                                                Transaction ID: {paymentStatus.transaction_id}
                                            </p>
                                            <p className="text-gray-400 text-sm mt-2">
                                                Redirecting to order confirmation...
                                            </p>
                                        </div>
                                    ) : (
                                        <p className="text-red-400">{paymentStatus.message}</p>
                                    )}
                                </div>
                            )}
                        </div>
                    </div>

                    {/* Order Summary */}
                    <div>
                        <div className="bg-gray-800 rounded-lg p-6">
                            <h2 className="text-xl font-semibold text-white mb-6">Order Summary</h2>

                            {/* Items */}
                            <div className="space-y-4 mb-6">
                                {cart.map((item) => (
                                    <div key={item.id} className="flex items-center gap-4">
                                        <img
                                            src={item.image}
                                            alt={item.name}
                                            className="w-16 h-16 object-cover rounded-lg"
                                        />
                                        <div className="flex-1">
                                            <h4 className="text-white font-medium">{item.name}</h4>
                                            <p className="text-gray-400 text-sm">Qty: {item.quantity}</p>
                                        </div>
                                        <p className="text-white">
                                            ${(item.price * item.quantity).toFixed(2)}
                                        </p>
                                    </div>
                                ))}
                            </div>

                            {/* Totals */}
                            <div className="border-t border-gray-700 pt-4 space-y-2">
                                <div className="flex justify-between text-gray-400">
                                    <span>Subtotal</span>
                                    <span>${getCartTotal().toFixed(2)}</span>
                                </div>
                                <div className="flex justify-between text-gray-400">
                                    <span>Tax (8%)</span>
                                    <span>${(getCartTotal() * 0.08).toFixed(2)}</span>
                                </div>
                                <div className="flex justify-between text-gray-400">
                                    <span>Quantum Security</span>
                                    <span className="text-green-400">FREE</span>
                                </div>
                                <div className="border-t border-gray-700 pt-2">
                                    <div className="flex justify-between text-white font-semibold text-lg">
                                        <span>Total</span>
                                        <span>${(getCartTotal() * 1.08).toFixed(2)}</span>
                                    </div>
                                </div>
                            </div>

                            {/* Security Info */}
                            <div className="mt-6 p-4 bg-blue-900/20 border border-blue-500/30 rounded-lg">
                                <h3 className="text-blue-400 font-semibold mb-2">
                                    Your Security Matters
                                </h3>
                                <ul className="text-blue-300 text-sm space-y-1">
                                    <li>• Payment encrypted with IBE</li>
                                    <li>• Transaction signed with Dilithium</li>
                                    <li>• Quantum-resistant protection</li>
                                    <li>• End-to-end encryption</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / pages / HomePage.tsx
import { useState, useEffect } from 'react';
import { useCart } from '../contexts/CartContext';
import ProductCard from '../components/ProductCard';
import Hero from '../components/Hero';

// Mock products data - trong production sẽ lấy từ API
const MOCK_PRODUCTS = [
    {
        id: '1',
        name: 'Quantum-Safe Laptop',
        description: 'Laptop với mã hóa quantum-resistant built-in',
        price: 1299.99,
        image: 'https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=500',
        category: 'Electronics',
        features: ['Post-Quantum Encryption', 'Secure Boot', 'Hardware Security Module']
    },
    {
        id: '2',
        name: 'Crypto Hardware Wallet',
        description: 'Hardware wallet với Dilithium signatures',
        price: 199.99,
        image: 'https://images.unsplash.com/photo-1621761191319-c6fb62004040?w=500',
        category: 'Security',
        features: ['CRYSTALS-Dilithium', 'Quantum-Safe', 'USB-C']
    },
    {
        id: '3',
        name: 'Secure Smartphone',
        description: 'Smartphone với IBE encryption cho messages',
        price: 899.99,
        image: 'https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=500',
        category: 'Electronics',
        features: ['IBE Messaging', 'Secure Enclave', '5G']
    },
    {
        id: '4',
        name: 'Privacy VPN Router',
        description: 'Router với post-quantum VPN protocols',
        price: 349.99,
        image: 'https://images.unsplash.com/photo-1606904825846-647eb07f5be2?w=500',
        category: 'Networking',
        features: ['Quantum-Safe VPN', 'WiFi 6E', 'Open Source']
    },
    {
        id: '5',
        name: 'Encrypted USB Drive',
        description: 'USB drive với hardware encryption',
        price: 89.99,
        image: 'https://images.unsplash.com/photo-1618478047375-2700c2f03456?w=500',
        category: 'Storage',
        features: ['256-bit AES', 'Biometric Lock', '1TB Storage']
    },
    {
        id: '6',
        name: 'Security Camera System',
        description: 'AI-powered camera với encrypted storage',
        price: 599.99,
        image: 'https://images.unsplash.com/photo-1557597774-9d273605dfa9?w=500',
        category: 'Security',
        features: ['4K Resolution', 'Night Vision', 'Cloud Backup']
    }
];

const CATEGORIES = ['All', 'Electronics', 'Security', 'Networking', 'Storage'];

export default function HomePage() {
    const [products] = useState(MOCK_PRODUCTS);
    const [filteredProducts, setFilteredProducts] = useState(MOCK_PRODUCTS);
    const [selectedCategory, setSelectedCategory] = useState('All');
    const [searchTerm, setSearchTerm] = useState('');
    const { addToCart } = useCart();

    // Filter products
    useEffect(() => {
        let filtered = products;

        if (selectedCategory !== 'All') {
            filtered = filtered.filter(p => p.category === selectedCategory);
        }

        if (searchTerm) {
            filtered = filtered.filter(p =>
                p.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                p.description.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }

        setFilteredProducts(filtered);
    }, [selectedCategory, searchTerm, products]);

    return (
        <div className="min-h-screen bg-gray-900">
            {/* Hero Section */}
            <Hero />

            {/* Search and Filter */}
            <div className="container mx-auto px-4 py-8">
                <div className="flex flex-col md:flex-row gap-4 mb-8">
                    {/* Search */}
                    <div className="flex-1">
                        <input
                            type="text"
                            placeholder="Search products..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-full px-4 py-3 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                        />
                    </div>

                    {/* Category Filter */}
                    <div className="flex gap-2">
                        {CATEGORIES.map(category => (
                            <button
                                key={category}
                                onClick={() => setSelectedCategory(category)}
                                className={`px-4 py-2 rounded-lg transition-all ${selectedCategory === category
                                    ? 'bg-blue-600 text-white'
                                    : 'bg-gray-800 text-gray-300 hover:bg-gray-700'
                                    }`}
                            >
                                {category}
                            </button>
                        ))}
                    </div>
                </div>

                {/* Products Grid */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {filteredProducts.map(product => (
                        <ProductCard
                            key={product.id}
                            product={product}
                            onAddToCart={() => addToCart(product)}
                        />
                    ))}
                </div>

                {filteredProducts.length === 0 && (
                    <div className="text-center py-12">
                        <p className="text-gray-400 text-xl">No products found</p>
                    </div>
                )}

                {/* Features Section */}
                <div className="mt-16 py-12 border-t border-gray-800">
                    <h2 className="text-3xl font-bold text-center mb-12 text-white">
                        Why Choose Quantum-Secure Commerce?
                    </h2>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                        <div className="text-center">
                            <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
                                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                                </svg>
                            </div>
                            <h3 className="text-xl font-semibold mb-2 text-white">Post-Quantum Security</h3>
                            <p className="text-gray-400">
                                All transactions protected with CRYSTALS-Dilithium signatures, resistant to quantum attacks
                            </p>
                        </div>

                        <div className="text-center">
                            <div className="w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4">
                                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                </svg>
                            </div>
                            <h3 className="text-xl font-semibold mb-2 text-white">Identity-Based Encryption</h3>
                            <p className="text-gray-400">
                                Your payment data encrypted with IBE, no complex key management needed
                            </p>
                        </div>

                        <div className="text-center">
                            <div className="w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
                                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                                </svg>
                            </div>
                            <h3 className="text-xl font-semibold mb-2 text-white">Lightning Fast</h3>
                            <p className="text-gray-400">
                                Optimized algorithms ensure security without sacrificing performance
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / pages / LoginPage.tsx
import React, { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

export default function LoginPage() {
    const navigate = useNavigate();
    const location = useLocation();
    const { login } = useAuth();
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const [formData, setFormData] = useState({
        email: '',
        password: ''
    });

    // Get redirect URL from query params
    const from = new URLSearchParams(location.search).get('redirect') || '/';

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setLoading(true);
        setError('');

        try {
            await login(formData.email, formData.password);
            navigate(from);
        } catch (err: any) {
            setError(err.response?.data?.detail || 'Invalid email or password');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-gray-900 flex items-center justify-center py-12 px-4">
            <div className="max-w-md w-full">
                {/* Logo */}
                <div className="text-center mb-8">
                    <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
                        <span className="text-white font-bold text-3xl">Q</span>
                    </div>
                    <h2 className="text-3xl font-bold text-white">Welcome Back</h2>
                    <p className="text-gray-400 mt-2">Sign in to your quantum-secure account</p>
                </div>

                {/* Form */}
                <div className="bg-gray-800 rounded-lg p-8">
                    {error && (
                        <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-4 mb-6">
                            <p className="text-red-400 text-sm">{error}</p>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-2">
                                Email Address
                            </label>
                            <input
                                type="email"
                                value={formData.email}
                                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                                required
                                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                placeholder="you@example.com"
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-2">
                                Password
                            </label>
                            <input
                                type="password"
                                value={formData.password}
                                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                                required
                                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                placeholder="••••••••"
                            />
                        </div>

                        <div className="flex items-center justify-between">
                            <label className="flex items-center">
                                <input type="checkbox" className="mr-2" />
                                <span className="text-sm text-gray-400">Remember me</span>
                            </label>
                            <a href="#" className="text-sm text-blue-400 hover:text-blue-300">
                                Forgot password?
                            </a>
                        </div>

                        <button
                            type="submit"
                            disabled={loading}
                            className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all disabled:opacity-60"
                        >
                            {loading ? 'Signing in...' : 'Sign In'}
                        </button>
                    </form>

                    <div className="mt-6">
                        <div className="relative">
                            <div className="absolute inset-0 flex items-center">
                                <div className="w-full border-t border-gray-700"></div>
                            </div>
                            <div className="relative flex justify-center text-sm">
                                <span className="px-2 bg-gray-800 text-gray-400">Or continue with</span>
                            </div>
                        </div>

                        <div className="mt-6 grid grid-cols-2 gap-3">
                            <button className="w-full bg-gray-700 text-white py-2 rounded-lg hover:bg-gray-600 transition-colors flex items-center justify-center gap-2">
                                <svg className="w-5 h-5" viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                                    <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                                    <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                                    <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
                                </svg>
                                Google
                            </button>
                            <button className="w-full bg-gray-700 text-white py-2 rounded-lg hover:bg-gray-600 transition-colors flex items-center justify-center gap-2">
                                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                                </svg>
                                GitHub
                            </button>
                        </div>
                    </div>

                    <p className="mt-6 text-center text-gray-400">
                        Don't have an account?{' '}
                        <Link to="/register" className="text-blue-400 hover:text-blue-300">
                            Sign up
                        </Link>
                    </p>
                </div>

                {/* Security Note */}
                <div className="mt-6 text-center">
                    <p className="text-gray-500 text-sm">
                        🔒 Protected by quantum-resistant cryptography
                    </p>
                </div>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / pages / ProductDetailPage.tsx
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import api from '../services/api';

export default function OrderDetailsPage() {
    const { transactionId } = useParams();
    const { token } = useAuth();
    const navigate = useNavigate();
    const [orderDetails, setOrderDetails] = useState<any>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        if (transactionId && token) {
            fetchOrderDetails();
        }
    }, [transactionId, token]);

    const fetchOrderDetails = async () => {
        try {
            const response = await api.get(`/api/orders/${transactionId}`);
            setOrderDetails(response.data);
        } catch (err: any) {
            setError(err.response?.data?.detail || 'Failed to load order details');
        } finally {
            setLoading(false);
        }
    };

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-900 flex items-center justify-center">
                <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="min-h-screen bg-gray-900 py-12">
                <div className="container mx-auto px-4">
                    <div className="max-w-md mx-auto text-center">
                        <h1 className="text-2xl font-bold text-white mb-4">Order Not Found</h1>
                        <p className="text-gray-400 mb-6">{error}</p>
                        <button
                            onClick={() => navigate('/orders')}
                            className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700"
                        >
                            Back to Orders
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-900 py-12">
            <div className="container mx-auto px-4">
                <div className="max-w-4xl mx-auto">
                    <h1 className="text-3xl font-bold text-white mb-8">Order Details</h1>

                    {orderDetails && (
                        <div className="bg-gray-800 rounded-lg p-8">
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                                <div>
                                    <h2 className="text-xl font-semibold text-white mb-4">Order Information</h2>
                                    <dl className="space-y-2">
                                        <div>
                                            <dt className="text-gray-400">Order ID:</dt>
                                            <dd className="text-white font-mono">{orderDetails.order_id || transactionId}</dd>
                                        </div>
                                        <div>
                                            <dt className="text-gray-400">Amount:</dt>
                                            <dd className="text-white">${orderDetails.amount} {orderDetails.currency}</dd>
                                        </div>
                                        <div>
                                            <dt className="text-gray-400">Status:</dt>
                                            <dd className="text-green-400">{orderDetails.status}</dd>
                                        </div>
                                        <div>
                                            <dt className="text-gray-400">Date:</dt>
                                            <dd className="text-white">{orderDetails.date || new Date().toLocaleString()}</dd>
                                        </div>
                                    </dl>
                                </div>

                                <div>
                                    <h2 className="text-xl font-semibold text-white mb-4">Security Information</h2>
                                    <div className="space-y-3">
                                        <div className="flex items-center gap-2 text-green-400">
                                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                            <span>Quantum-secured transaction</span>
                                        </div>
                                        <div className="flex items-center gap-2 text-blue-400">
                                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                                            </svg>
                                            <span>IBE encrypted payment data</span>
                                        </div>
                                        <div className="flex items-center gap-2 text-purple-400">
                                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                            </svg>
                                            <span>Dilithium digital signature</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / pages / RegisterPage.tsx
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

export default function RegisterPage() {
    const navigate = useNavigate();
    const { register } = useAuth();
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const [formData, setFormData] = useState({
        name: '',
        email: '',
        password: '',
        confirmPassword: ''
    });

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError('');

        // Validate passwords match
        if (formData.password !== formData.confirmPassword) {
            setError('Passwords do not match');
            return;
        }

        // Validate password strength
        if (formData.password.length < 8) {
            setError('Password must be at least 8 characters long');
            return;
        }

        setLoading(true);

        try {
            await register(formData.email, formData.name, formData.password);
            navigate('/');
        } catch (err: any) {
            setError(err.response?.data?.detail || 'Registration failed');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-gray-900 flex items-center justify-center py-12 px-4">
            <div className="max-w-md w-full">
                {/* Logo */}
                <div className="text-center mb-8">
                    <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
                        <span className="text-white font-bold text-3xl">Q</span>
                    </div>
                    <h2 className="text-3xl font-bold text-white">Create Account</h2>
                    <p className="text-gray-400 mt-2">Join the quantum-secure commerce revolution</p>
                </div>

                {/* Form */}
                <div className="bg-gray-800 rounded-lg p-8">
                    {error && (
                        <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-4 mb-6">
                            <p className="text-red-400 text-sm">{error}</p>
                        </div>
                    )}

                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-2">
                                Full Name
                            </label>
                            <input
                                type="text"
                                value={formData.name}
                                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                                required
                                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                placeholder="John Doe"
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-2">
                                Email Address
                            </label>
                            <input
                                type="email"
                                value={formData.email}
                                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                                required
                                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                placeholder="you@example.com"
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-2">
                                Password
                            </label>
                            <input
                                type="password"
                                value={formData.password}
                                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                                required
                                minLength={8}
                                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                placeholder="••••••••"
                            />
                            <p className="text-gray-500 text-xs mt-1">
                                Must be at least 8 characters long
                            </p>
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-2">
                                Confirm Password
                            </label>
                            <input
                                type="password"
                                value={formData.confirmPassword}
                                onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                                required
                                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                                placeholder="••••••••"
                            />
                        </div>

                        {/* Security Features */}
                        <div className="bg-blue-900/20 border border-blue-500/30 rounded-lg p-4">
                            <h3 className="text-blue-400 font-semibold mb-2">
                                Your account includes:
                            </h3>
                            <ul className="text-blue-300 text-sm space-y-1">
                                <li>✓ Identity-Based Encryption (IBE) key</li>
                                <li>✓ Quantum-resistant authentication</li>
                                <li>✓ Secure payment processing</li>
                                <li>✓ End-to-end encrypted communications</li>
                            </ul>
                        </div>

                        <div className="flex items-center">
                            <input type="checkbox" id="terms" className="mr-2" required />
                            <label htmlFor="terms" className="text-sm text-gray-400">
                                I agree to the{' '}
                                <a href="#" className="text-blue-400 hover:text-blue-300">
                                    Terms of Service
                                </a>{' '}
                                and{' '}
                                <a href="#" className="text-blue-400 hover:text-blue-300">
                                    Privacy Policy
                                </a>
                            </label>
                        </div>

                        <button
                            type="submit"
                            disabled={loading}
                            className="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all disabled:opacity-60"
                        >
                            {loading ? 'Creating Account...' : 'Create Account'}
                        </button>
                    </form>

                    <p className="mt-6 text-center text-gray-400">
                        Already have an account?{' '}
                        <Link to="/login" className="text-blue-400 hover:text-blue-300">
                            Sign in
                        </Link>
                    </p>
                </div>

                {/* Security Note */}
                <div className="mt-6 text-center">
                    <p className="text-gray-500 text-sm">
                        🔒 Your IBE key will be generated upon registration
                    </p>
                </div>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / pages / OrderHistoryPage.tsx
import { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../contexts/AuthContext';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

interface Transaction {
    transaction_id: string;
    amount: number;
    currency: string;
    status: string;
    timestamp: string;
}

export default function OrderHistoryPage() {
    const { token } = useAuth();
    const [transactions, setTransactions] = useState < Transaction[] > ([]);
    const [loading, setLoading] = useState(true);
    const [selectedTransaction, setSelectedTransaction] = useState < string | null > (null);
    const navigate = useNavigate();

    useEffect(() => {
        fetchTransactions();
    }, []);

    const fetchTransactions = async () => {
        try {
            const response = await axios.get(`${API_URL}/api/transactions`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setTransactions(response.data.transactions);
        } catch (error) {
            console.error('Failed to fetch transactions:', error);
        } finally {
            setLoading(false);
        }
    };

    const verifyTransaction = async (transactionId: string) => {
        try {
            const response = await axios.post(
                `${API_URL}/api/payments/verify`,
                { transaction_id: transactionId },
                { headers: { Authorization: `Bearer ${token}` } }
            );

            if (response.data.verified) {
                alert('✅ Transaction signature verified successfully!');
            } else {
                alert('❌ Transaction signature verification failed');
            }
        } catch (error) {
            console.error('Verification failed:', error);
        }
    };

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-900 flex items-center justify-center">
                <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-900 py-12">
            <div className="container mx-auto px-4">
                <h1 className="text-3xl font-bold text-white mb-8">Order History</h1>

                {transactions.length === 0 ? (
                    <div className="bg-gray-800 rounded-lg p-12 text-center">
                        <svg className="w-24 h-24 text-gray-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                        </svg>
                        <h2 className="text-xl font-semibold text-white mb-2">No Orders Yet</h2>
                        <p className="text-gray-400 mb-6">
                            Start shopping to see your quantum-secured transactions here!
                        </p>
                        <Link
                            to="/"
                            className="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
                        >
                            Start Shopping
                        </Link>
                    </div>
                ) : (
                    <div className="bg-gray-800 rounded-lg overflow-hidden">
                        <table className="w-full">
                            <thead className="bg-gray-700">
                                <tr>
                                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                                        Order ID
                                    </th>
                                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                                        Date
                                    </th>
                                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                                        Amount
                                    </th>
                                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                                        Status
                                    </th>
                                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                                        Security
                                    </th>
                                    <th className="px-6 py-4 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                                        Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-700">
                                {transactions.map((transaction) => (
                                    <tr key={transaction.transaction_id} className="hover:bg-gray-700/50">
                                        <td className="px-6 py-4 whitespace-nowrap">
                                            <span className="text-white font-mono text-sm">
                                                {transaction.transaction_id}
                                            </span>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-gray-300">
                                            {new Date(transaction.timestamp).toLocaleDateString()}
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-white">
                                            ${transaction.amount.toFixed(2)} {transaction.currency}
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap">
                                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${transaction.status === 'completed'
                                                ? 'bg-green-900/20 text-green-400 border border-green-500/30'
                                                : 'bg-yellow-900/20 text-yellow-400 border border-yellow-500/30'
                                                }`}>
                                                {transaction.status}
                                            </span>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap">
                                            <div className="flex items-center gap-2">
                                                <span className="text-green-400" title="IBE Encrypted">
                                                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                                                    </svg>
                                                </span>
                                                <span className="text-blue-400" title="Dilithium Signed">
                                                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                                    </svg>
                                                </span>
                                            </div>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                                            <button
                                                onClick={() => verifyTransaction(transaction.transaction_id)}
                                                className="text-blue-400 hover:text-blue-300 mr-3"
                                            >
                                                Verify
                                            </button>
                                            <button
                                                onClick={() => navigate(`/order-details/${transaction.transaction_id}`)}
                                                className="text-gray-400 hover:text-white"
                                            >
                                                Details
                                            </button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                )}

                {/* Security Info */}
                <div className="mt-8 bg-blue-900/20 border border-blue-500/30 rounded-lg p-6">
                    <h3 className="text-blue-400 font-semibold mb-3">About Your Transaction Security</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div className="flex items-start gap-3">
                            <svg className="w-5 h-5 text-blue-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                            <div>
                                <p className="text-blue-300 font-medium">IBE Encryption</p>
                                <p className="text-blue-200">
                                    All payment data encrypted with your identity-based key
                                </p>
                            </div>
                        </div>
                        <div className="flex items-start gap-3">
                            <svg className="w-5 h-5 text-blue-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                            </svg>
                            <div>
                                <p className="text-blue-300 font-medium">Dilithium Signatures</p>
                                <p className="text-blue-200">
                                    Every transaction signed with quantum-resistant signatures
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / pages / OrderSuccessPage.tsx
import { useEffect, useState } from 'react';
import { Link, useParams } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../contexts/AuthContext';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

export default function OrderSuccessPage() {
    const { orderId } = useParams();
    const { token } = useAuth();
    const [orderDetails, setOrderDetails] = useState < any > (null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        // Fetch order details
        const fetchOrder = async () => {
            try {
                const response = await axios.get(
                    `${API_URL}/api/payments/${orderId}`,
                    {
                        headers: { Authorization: `Bearer ${token}` }
                    }
                );
                setOrderDetails(response.data);
            } catch (error) {
                console.error('Failed to fetch order details:', error);
            } finally {
                setLoading(false);
            }
        };

        if (orderId && token) {
            fetchOrder();
        }
    }, [orderId, token]);

    if (loading) {
        return (
            <div className="min-h-screen bg-gray-900 py-12 flex items-center justify-center">
                <div className="text-white">Loading order details...</div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-900 py-12">
            <div className="container mx-auto px-4">
                <div className="max-w-2xl mx-auto">
                    {/* Success Animation */}
                    <div className="text-center mb-8">
                        <div className="w-24 h-24 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4 animate-bounce">
                            <svg className="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                            </svg>
                        </div>
                        <h1 className="text-3xl font-bold text-white mb-2">Order Confirmed!</h1>
                        <p className="text-gray-400">
                            Thank you for your purchase. Your order has been secured with quantum cryptography.
                        </p>
                    </div>

                    {/* Order Details Card */}
                    <div className="bg-gray-800 rounded-lg p-8 mb-8">
                        <div className="flex items-center justify-between mb-6">
                            <h2 className="text-xl font-semibold text-white">Order Details</h2>
                            <span className="text-green-400 text-sm flex items-center gap-1">
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                </svg>
                                Quantum Secured
                            </span>
                        </div>

                        <div className="space-y-4">
                            <div>
                                <p className="text-gray-400 text-sm">Transaction ID</p>
                                <p className="text-white font-mono">{orderId}</p>
                            </div>

                            <div>
                                <p className="text-gray-400 text-sm">Order Date</p>
                                <p className="text-white">{new Date().toLocaleString()}</p>
                            </div>

                            <div>
                                <p className="text-gray-400 text-sm">Status</p>
                                <span className="inline-flex items-center gap-2 bg-green-900/20 text-green-400 px-3 py-1 rounded-full text-sm">
                                    <span className="w-2 h-2 bg-green-400 rounded-full"></span>
                                    Completed
                                </span>
                            </div>

                            {orderDetails && (
                                <div>
                                    <p className="text-gray-400 text-sm">Customer ID</p>
                                    <p className="text-white">{orderDetails.customer_id}</p>
                                </div>
                            )}
                        </div>

                        {/* Security Features */}
                        <div className="mt-6 pt-6 border-t border-gray-700">
                            <h3 className="text-white font-semibold mb-3">Transaction Security</h3>
                            <div className="space-y-2">
                                <div className="flex items-center gap-2 text-gray-300">
                                    <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    <span>Payment encrypted with Identity-Based Encryption</span>
                                </div>
                                <div className="flex items-center gap-2 text-gray-300">
                                    <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    <span>Transaction signed with CRYSTALS-Dilithium</span>
                                </div>
                                <div className="flex items-center gap-2 text-gray-300">
                                    <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    <span>Quantum-resistant digital signature verified</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* What's Next */}
                    <div className="bg-blue-900/20 border border-blue-500/30 rounded-lg p-6 mb-8">
                        <h3 className="text-blue-400 font-semibold mb-2">What happens next?</h3>
                        <ul className="text-blue-300 space-y-2 text-sm">
                            <li>• You'll receive an encrypted confirmation email</li>
                            <li>• Your order will be processed within 24 hours</li>
                            <li>• Track your order status in your account</li>
                            <li>• Digital receipt available in your order history</li>
                        </ul>
                    </div>

                    {/* Actions */}
                    <div className="flex flex-col sm:flex-row gap-4 justify-center">
                        <Link
                            to="/orders"
                            className="bg-gray-700 text-white px-6 py-3 rounded-lg hover:bg-gray-600 transition-colors text-center"
                        >
                            View Order History
                        </Link>
                        <Link
                            to="/"
                            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors text-center"
                        >
                            Continue Shopping
                        </Link>
                    </div>
                </div>
            </div>
        </div>
    );
}
/root/quantum - secure - commerce / webapp / src / pages / OrderDetailPage.tsx
import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useCart } from '../contexts/CartContext';

// Mock products data - should match HomePage
const MOCK_PRODUCTS = [
    {
        id: '1',
        name: 'Quantum-Safe Laptop',
        description: 'Laptop với mã hóa quantum-resistant built-in',
        longDescription: 'Experience unparalleled security with our quantum-safe laptop. Features military-grade encryption, secure boot process, and hardware-based security modules designed to withstand quantum computing attacks.',
        price: 1299.99,
        image: 'https://images.unsplash.com/photo-1496181133206-80ce9b88a853?w=500',
        category: 'Electronics',
        features: ['Post-Quantum Encryption', 'Secure Boot', 'Hardware Security Module', '16GB RAM', '512GB SSD', 'Intel Core i7'],
        inStock: true,
        specs: {
            'Processor': 'Intel Core i7-12700H',
            'Memory': '16GB DDR5',
            'Storage': '512GB NVMe SSD',
            'Display': '15.6" FHD IPS',
            'Security': 'TPM 2.0 + Quantum Module',
            'OS': 'Windows 11 Pro'
        }
    },
    {
        id: '2',
        name: 'Crypto Hardware Wallet',
        description: 'Hardware wallet với Dilithium signatures',
        longDescription: 'The most secure hardware wallet on the market, featuring post-quantum cryptographic signatures using CRYSTALS-Dilithium. Protect your digital assets against future quantum threats.',
        price: 199.99,
        image: 'https://images.unsplash.com/photo-1621761191319-c6fb62004040?w=500',
        category: 'Security',
        features: ['CRYSTALS-Dilithium', 'Quantum-Safe', 'USB-C', 'OLED Display', 'Open Source Firmware'],
        inStock: true,
        specs: {
            'Algorithms': 'Dilithium2, Dilithium3',
            'Display': '128x64 OLED',
            'Connectivity': 'USB-C',
            'Battery': '100mAh',
            'Compatibility': 'Windows/Mac/Linux',
            'Certifications': 'CC EAL5+'
        }
    },
    {
        id: '3',
        name: 'Secure Smartphone',
        description: 'Smartphone với IBE encryption cho messages',
        longDescription: 'Revolutionary smartphone featuring Identity-Based Encryption for all communications. Your messages, calls, and data are protected by quantum-resistant cryptography.',
        price: 899.99,
        image: 'https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=500',
        category: 'Electronics',
        features: ['IBE Messaging', 'Secure Enclave', '5G', '128GB Storage', 'Quantum-Safe OS'],
        inStock: true,
        specs: {
            'Display': '6.7" AMOLED 120Hz',
            'Processor': 'Snapdragon 8 Gen 2',
            'Memory': '8GB RAM',
            'Storage': '128GB',
            'Camera': '50MP Triple Camera',
            'Security': 'IBE + Secure Enclave'
        }
    },
    {
        id: '4',
        name: 'Privacy VPN Router',
        description: 'Router với post-quantum VPN protocols',
        longDescription: 'Advanced router supporting post-quantum VPN protocols. Secure your entire network against current and future threats with quantum-resistant encryption.',
        price: 349.99,
        image: 'https://images.unsplash.com/photo-1606904825846-647eb07f5be2?w=500',
        category: 'Networking',
        features: ['Quantum-Safe VPN', 'WiFi 6E', 'Open Source', '10Gbps Ports', 'WireGuard Support'],
        inStock: true,
        specs: {
            'WiFi': '802.11ax (WiFi 6E)',
            'Ports': '4x 10Gbps Ethernet',
            'VPN': 'Post-Quantum WireGuard',
            'Processor': 'Quad-Core ARM',
            'Memory': '2GB DDR4',
            'Firmware': 'OpenWRT Based'
        }
    },
    {
        id: '5',
        name: 'Encrypted USB Drive',
        description: 'USB drive với hardware encryption',
        longDescription: 'Military-grade encrypted USB drive with hardware-based encryption. Features biometric authentication and quantum-resistant algorithms.',
        price: 89.99,
        image: 'https://images.unsplash.com/photo-1618478047375-2700c2f03456?w=500',
        category: 'Storage',
        features: ['256-bit AES', 'Biometric Lock', '1TB Storage', 'USB 3.2', 'IP67 Waterproof'],
        inStock: true,
        specs: {
            'Capacity': '1TB',
            'Interface': 'USB 3.2 Gen 2',
            'Encryption': 'AES-256 + Quantum Layer',
            'Authentication': 'Fingerprint + PIN',
            'Speed': 'Read: 1000MB/s, Write: 900MB/s',
            'Durability': 'IP67, MIL-STD-810G'
        }
    },
    {
        id: '6',
        name: 'Security Camera System',
        description: 'AI-powered camera với encrypted storage',
        longDescription: 'Complete security camera system with AI-powered detection and quantum-encrypted cloud storage. Monitor your property with unbreakable security.',
        price: 599.99,
        image: 'https://images.unsplash.com/photo-1557597774-9d273605dfa9?w=500',
        category: 'Security',
        features: ['4K Resolution', 'Night Vision', 'Cloud Backup', 'AI Detection', 'Quantum Encryption'],
        inStock: true,
        specs: {
            'Resolution': '4K Ultra HD (3840x2160)',
            'Night Vision': 'Up to 100ft',
            'Storage': 'Local + Encrypted Cloud',
            'AI Features': 'Person/Vehicle Detection',
            'Connectivity': 'WiFi 6 + Ethernet',
            'Weather Rating': 'IP66'
        }
    }
];

export default function ProductDetailPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const { addToCart } = useCart();
    const [quantity, setQuantity] = useState(1);
    const [selectedImage, setSelectedImage] = useState(0);

    const product = MOCK_PRODUCTS.find(p => p.id === id);

    if (!product) {
        return (
            <div className="min-h-screen bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <h1 className="text-2xl font-bold text-white mb-4">Product Not Found</h1>
                    <button
                        onClick={() => navigate('/')}
                        className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700"
                    >
                        Back to Products
                    </button>
                </div>
            </div>
        );
    }

    const handleAddToCart = () => {
        for (let i = 0; i < quantity; i++) {
            addToCart(product);
        }
        navigate('/cart');
    };

    return (
        <div className="min-h-screen bg-gray-900 py-12">
            <div className="container mx-auto px-4">
                {/* Breadcrumb */}
                <nav className="text-gray-400 mb-8">
                    <ol className="flex items-center space-x-2">
                        <li><a href="/" className="hover:text-white">Home</a></li>
                        <li>/</li>
                        <li><a href="/" className="hover:text-white">Products</a></li>
                        <li>/</li>
                        <li className="text-white">{product.name}</li>
                    </ol>
                </nav>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
                    {/* Product Images */}
                    <div>
                        <div className="bg-gray-800 rounded-lg overflow-hidden mb-4">
                            <img
                                src={product.image}
                                alt={product.name}
                                className="w-full h-96 object-cover"
                            />
                        </div>

                        {/* Thumbnail gallery (mock) */}
                        <div className="grid grid-cols-4 gap-2">
                            {[1, 2, 3, 4].map((i) => (
                                <button
                                    key={i}
                                    className={`bg-gray-800 rounded-lg overflow-hidden ${selectedImage === i - 1 ? 'ring-2 ring-blue-500' : ''
                                        }`}
                                    onClick={() => setSelectedImage(i - 1)}
                                >
                                    <img
                                        src={product.image}
                                        alt={`${product.name} ${i}`}
                                        className="w-full h-20 object-cover opacity-70 hover:opacity-100"
                                    />
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* Product Info */}
                    <div>
                        <div className="mb-6">
                            <span className="text-sm text-gray-400 bg-gray-800 px-3 py-1 rounded-full">
                                {product.category}
                            </span>
                            <h1 className="text-3xl font-bold text-white mt-4 mb-2">{product.name}</h1>
                            <p className="text-gray-400">{product.longDescription}</p>
                        </div>

                        {/* Price and Stock */}
                        <div className="mb-6">
                            <div className="flex items-baseline gap-4">
                                <span className="text-4xl font-bold text-white">${product.price}</span>
                                {product.inStock ? (
                                    <span className="text-green-400 flex items-center gap-1">
                                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                        </svg>
                                        In Stock
                                    </span>
                                ) : (
                                    <span className="text-red-400">Out of Stock</span>
                                )}
                            </div>
                        </div>

                        {/* Features */}
                        <div className="mb-6">
                            <h3 className="text-white font-semibold mb-3">Key Features</h3>
                            <div className="flex flex-wrap gap-2">
                                {product.features.map((feature, index) => (
                                    <span
                                        key={index}
                                        className="bg-blue-600/20 text-blue-400 px-3 py-1 rounded-full text-sm"
                                    >
                                        {feature}
                                    </span>
                                ))}
                            </div>
                        </div>

                        {/* Quantity and Add to Cart */}
                        <div className="flex items-center gap-4 mb-8">
                            <div className="flex items-center gap-2">
                                <button
                                    onClick={() => setQuantity(Math.max(1, quantity - 1))}
                                    className="w-10 h-10 bg-gray-700 text-white rounded-lg hover:bg-gray-600 flex items-center justify-center"
                                >
                                    -
                                </button>
                                <input
                                    type="number"
                                    value={quantity}
                                    onChange={(e) => setQuantity(Math.max(1, parseInt(e.target.value) || 1))}
                                    className="w-16 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white text-center"
                                />
                                <button
                                    onClick={() => setQuantity(quantity + 1)}
                                    className="w-10 h-10 bg-gray-700 text-white rounded-lg hover:bg-gray-600 flex items-center justify-center"
                                >
                                    +
                                </button>
                            </div>

                            <button
                                onClick={handleAddToCart}
                                disabled={!product.inStock}
                                className="flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                Add to Cart
                            </button>
                        </div>

                        {/* Security Badge */}
                        <div className="bg-green-900/20 border border-green-500/30 rounded-lg p-4 mb-8">
                            <div className="flex items-center gap-3">
                                <svg className="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                </svg>
                                <div>
                                    <p className="text-green-400 font-semibold">Quantum-Safe Purchase</p>
                                    <p className="text-green-300 text-sm">
                                        This transaction will be protected by post-quantum cryptography
                                    </p>
                                </div>
                            </div>
                        </div>

                        {/* Specifications */}
                        {product.specs && (
                            <div>
                                <h3 className="text-white font-semibold mb-3">Specifications</h3>
                                <div className="bg-gray-800 rounded-lg p-4">
                                    <dl className="space-y-2">
                                        {Object.entries(product.specs).map(([key, value]) => (
                                            <div key={key} className="flex justify-between">
                                                <dt className="text-gray-400">{key}:</dt>
                                                <dd className="text-white">{value}</dd>
                                            </div>
                                        ))}
                                    </dl>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}

/root/quantum - secure - commerce / webapp / src / services / api.ts
// webapp/src/services/api.ts
/**
 * Secure API service
 */
import axios from 'axios';
import { SecurityConfig } from '../config/security';

// Create axios instance
const api = axios.create({
    baseURL: SecurityConfig.API_URL,
    timeout: 30000,
    headers: {
        'Content-Type': 'application/json',
    }
});

// Request interceptor
api.interceptors.request.use(
    (config) => {
        // Add auth token
        const token = localStorage.getItem(SecurityConfig.TOKEN_KEY);
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }

        // Add CSRF token
        const csrfToken = SecurityConfig.getCSRFToken();
        if (csrfToken) {
            config.headers['X-CSRF-Token'] = csrfToken;
        }

        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

// Response interceptor
api.interceptors.response.use(
    (response) => response,
    (error) => {
        if (error.response?.status === 401) {
            // Token expired or invalid
            localStorage.removeItem(SecurityConfig.TOKEN_KEY);
            localStorage.removeItem(SecurityConfig.USER_KEY);
            window.location.href = '/login';
        }

        return Promise.reject(error);
    }
);

export default api;
/root/quantum - secure - commerce / webapp / src / App.tsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from './contexts/AuthContext';
import { CartProvider } from './contexts/CartContext';
import Layout from './components/Layout';
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import ProductDetailPage from './pages/ProductDetailPage';
import CartPage from './pages/CartPage';
import CheckoutPage from './pages/CheckoutPage';
import OrderSuccessPage from './pages/OrderSuccessPage';
import OrderHistoryPage from './pages/OrderHistoryPage';
import AdminDashboard from './pages/AdminDashboard';
import PrivateRoute from './components/PrivateRoute';
import OrderDetailsPage from './pages/OrderDetailsPage';
function App() {
    return (
        <AuthProvider>
            <CartProvider>
                <Router>
                    <Routes>
                        <Route path="/" element={<Layout />}>
                            <Route index element={<HomePage />} />
                            <Route path="login" element={<LoginPage />} />
                            <Route path="register" element={<RegisterPage />} />
                            <Route path="product/:id" element={<ProductDetailPage />} />
                            <Route path="cart" element={<CartPage />} />

                            {/* Protected Routes */}
                            <Route element={<PrivateRoute />}>
                                <Route path="checkout" element={<CheckoutPage />} />
                                <Route path="order-success/:orderId" element={<OrderSuccessPage />} />
                                <Route path="orders" element={<OrderHistoryPage />} />
                            </Route>

                            {/* Admin Routes */}
                            <Route element={<PrivateRoute requiredRole="admin" />}>
                                <Route path="admin/*" element={<AdminDashboard />} />
                            </Route>
                            <Route path="/order-details/:transactionId" element={<OrderDetailsPage />} />
                        </Route>
                    </Routes>
                </Router>
            </CartProvider>
        </AuthProvider>
    );
}

export default App;
/root/quantum - secure - commerce / webapp /.env
VITE_API_URL = http://localhost:8000
/root/quantum - secure - commerce / webapp /.env.production
VITE_API_URL = https://finalprojectnt219.onrender.com
VITE_WS_URL = wss://api.quantumcommerce.com/ws
VITE_CRYPTO_DEMO_MODE = false
VITE_ANALYTICS_ID = GA_MEASUREMENT_ID
    / root / quantum - secure - commerce / webapp / Dockerfile
FROM node: 18 - alpine as builder

WORKDIR / app
COPY package *.json./
    RUN npm ci

COPY. .
RUN npm run build

FROM nginx: alpine
COPY--from = builder / app / dist / usr / share / nginx / html
COPY nginx.conf / etc / nginx / nginx.conf

EXPOSE 80
CMD["nginx", "-g", "daemon off;"]
    / root / quantum - secure - commerce / webapp / netlify.toml
    [build]
command = "npm run build"
publish = "dist"

[[redirects]]
from = "/api/*"
to = "https://finalprojectnt219.onrender.com/api/:splat"
status = 200
force = true

[[redirects]]
from = "/*"
to = "/index.html"
status = 200
