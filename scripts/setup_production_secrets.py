# scripts/setup_production_secrets.py
"""
PRODUCTION SECRET SETUP - KH√îNG BAO GI·ªú commit file n√†y
Ch·∫°y 1 l·∫ßn duy nh·∫•t ƒë·ªÉ setup secrets, sau ƒë√≥ X√ìA
"""
import os
import base64
import secrets
from pathlib import Path
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

class ProductionSecretSetup:
    """Setup secrets cho production - CH·ªà CH·∫†Y 1 L·∫¶N"""
    
    def __init__(self):
        self.secrets_dir = Path("secrets")
        self.secrets_dir.mkdir(mode=0o700, exist_ok=True)
        
        # ƒê·ªåC master password t·ª´ KEYBOARD (kh√¥ng l∆∞u file)
        self.master_password = input("Nh·∫≠p MASTER PASSWORD (nh·ªõ k·ªπ, kh√¥ng l∆∞u ƒë√¢u): ").encode()
        
        # T·∫°o encryption key t·ª´ password
        salt = os.urandom(16)
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        
        self.key = base64.urlsafe_b64encode(kdf.derive(self.master_password))
        self.fernet = Fernet(self.key)
        
        # L∆∞u salt (c·∫ßn ƒë·ªÉ decrypt sau n√†y)
        with open(self.secrets_dir / "salt.dat", "wb") as f:
            f.write(salt)
        os.chmod(self.secrets_dir / "salt.dat", 0o600)
    
    def generate_crypto_keys(self):
        """T·∫°o REAL crypto keys"""
        print("üîë Generating cryptographic keys...")
        
        # 1. JWT Secret (256-bit)
        jwt_secret = base64.b64encode(secrets.token_bytes(32)).decode()
        
        # 2. Dilithium Master Key (512-bit for high security)
        dilithium_key = base64.b64encode(secrets.token_bytes(64)).decode()
        
        # 3. IBE Master Key (256-bit)
        ibe_key = base64.b64encode(secrets.token_bytes(32)).decode()
        
        # 4. Database encryption key
        db_key = base64.b64encode(secrets.token_bytes(32)).decode()
        
        # 5. Redis password
        redis_pass = secrets.token_urlsafe(32)
        
        # 6. Database password  
        db_pass = secrets.token_urlsafe(24)
        
        return {
            "jwt_secret": jwt_secret,
            "dilithium_master_key": dilithium_key,
            "ibe_master_key": ibe_key,
            "database_encryption_key": db_key,
            "redis_password": redis_pass,
            "database_password": db_pass,
        }
    
    def encrypt_and_store_secrets(self, secrets_dict):
        """M√£ h√≥a v√† l∆∞u secrets"""
        print("üîí Encrypting and storing secrets...")
        
        encrypted_secrets = {}
        for key, value in secrets_dict.items():
            encrypted_value = self.fernet.encrypt(value.encode()).decode()
            encrypted_secrets[key] = encrypted_value
        
        # L∆∞u v√†o file m√£ h√≥a
        import json
        with open(self.secrets_dir / "encrypted_secrets.json", "w") as f:
            json.dump(encrypted_secrets, f, indent=2)
        
        os.chmod(self.secrets_dir / "encrypted_secrets.json", 0o600)
        
        print("‚úÖ Secrets encrypted and stored safely")
    
    def create_env_template(self):
        """T·∫°o .env template KH√îNG ch·ª©a secrets"""
        template = """# .env.production
# PRODUCTION ENVIRONMENT - NO SECRETS HERE!
# All secrets are stored encrypted in secrets/ directory

# Application Config
APP_NAME=quantum-commerce
APP_ENV=production
DEBUG=false

# Database Connection (passwords stored encrypted)
DB_HOST=postgres
DB_PORT=5432
DB_NAME=quantum_commerce
DB_USER=qsc_user

# Redis Connection  
REDIS_HOST=redis
REDIS_PORT=6379

# Vault Config
VAULT_ADDR=http://vault:8200

# Feature Flags
USE_REAL_CRYPTO=true
RATE_LIMIT_ENABLED=true
SESSION_TIMEOUT_MINUTES=30

# Monitoring
PROMETHEUS_PORT=9090
GRAFANA_PORT=3030

# ‚ö†Ô∏è SECRETS ƒê∆Ø·ª¢C L·∫§Y T·ª™ ENCRYPTED STORAGE
# KH√îNG BAO GI·ªú commit passwords v√†o ƒë√¢y!
"""
        
        with open(".env.production", "w") as f:
            f.write(template)
        
        print("üìù Created .env.production template")
    
    def setup_gitignore(self):
        """C·∫≠p nh·∫≠t .gitignore ƒë·ªÉ b·∫£o v·ªá secrets"""
        gitignore_additions = """
# SECURITY - NEVER COMMIT THESE!
secrets/
.env
.env.local
.env.production
.env.development
*.key
*.pem
master_password.txt
vault_token.txt

# Crypto keys
keys/dilithium/
keys/ibe/
keys/*.key

# Logs c√≥ th·ªÉ ch·ª©a sensitive data
logs/*.log
logs/security.log

# Database dumps
*.sql
*.db

# Backup files
*.backup
*.bak
temp/
"""
        
        with open(".gitignore", "a") as f:
            f.write(gitignore_additions)
        
        print("üõ°Ô∏è Updated .gitignore for security")
    
    def run_setup(self):
        """Ch·∫°y to√†n b·ªô setup"""
        print("üöÄ PRODUCTION SECRET SETUP")
        print("=" * 50)
        
        # 1. Generate keys
        secrets_dict = self.generate_crypto_keys()
        
        # 2. Encrypt and store
        self.encrypt_and_store_secrets(secrets_dict)
        
        # 3. Create templates
        self.create_env_template()
        
        # 4. Setup gitignore
        self.setup_gitignore()
        
        print("\n‚úÖ SETUP COMPLETE!")
        print("üîë Secrets stored encrypted in secrets/")
        print("‚ö†Ô∏è  NH·ªö MASTER PASSWORD - kh√¥ng c√≥ c√°ch n√†o recover!")
        print("üìù S·ª≠ d·ª•ng .env.production template")
        
        # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
        print("\nüìã NEXT STEPS:")
        print("1. Export MASTER_PASSWORD environment variable")
        print("2. rm scripts/setup_production_secrets.py  # X√ìA FILE N√ÄY!")
        print("3. git add .gitignore")
        print("4. git commit -m 'Add security .gitignore'")
        print("5. KH√îNG BAO GI·ªú commit secrets/")

if __name__ == "__main__":
    setup = ProductionSecretSetup()
    setup.run_setup()